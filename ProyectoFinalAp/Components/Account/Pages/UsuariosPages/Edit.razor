@page "/usuarios/editar/{UsuarioId:int}"
@inject UsuariosService usuarioService
@inject NavigationManager navigation
@rendermode InteractiveServer

<PageTitle>Edit Usuarios</PageTitle>

@attribute [Authorize(Roles = "Admin")]

<EditForm Model="usuario" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <div class="container text-center">
        <div class="card-header bg-warning text-center">
            <h1>Editar Usuarios</h1>
        </div>
        <div class="row">
            <div class="col-md-4">
                <label>ID</label>
                <InputNumber @bind-Value="usuario.UsuarioId" class="form-control" disabled />
            </div>
            <div class="col-md-4">
                <label>UserId</label>
                <InputText @bind-Value="usuario.UserId" class="form-control" disabled />
                <ValidationMessage For="@(() => usuario.UserId)" />
            </div>
            <div class="col-md-4">
                <label>RolId</label>
                <InputText @bind-Value="usuario.RolId" class="form-control " disabled />
                <ValidationMessage For="@(() => usuario.RolId)" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <label>Nombre</label>
                <InputText @bind-Value="usuario.Nombre" class="form-control" />
                <ValidationMessage For="@(() => usuario.Nombre)" />
            </div>
            <div class="col-md-4">
                <label>Fecha</label>
                <InputDate @bind-Value="usuario.FechaRegistro" class="form-control" />
                <ValidationMessage For="@(() => usuario.FechaRegistro)" />
            </div>
        </div>
        <div class="card-footer text-center">
            <button class="btn btn-success">Modificar <i class="bi bi-floppy-fill" /></button>
            <div class="btn btn-outline-primary" @onclick="Volver">Volver <i class="bi bi-arrow-return-left" /></div>

        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int UsuarioId { get; set; }
    public Usuarios usuario { get; set; } = new Usuarios();
    public List<Usuarios> listUsuarios { get; set; } = new List<Usuarios>();
    public bool hayUsuario = false;
    public List<ToastMessage> messages = new List<ToastMessage>();
    public void Notificacion(ToastType toastType, string message) => messages.Add(ShowToast(toastType, message));
    private ToastMessage ShowToast(ToastType toastType, string message)
    {
        var mensaje = new ToastMessage()
            {
                Type = toastType,
                Message = $"{message}. El {DateTime.Now.ToString("dd/MM/yyyy")} a las {DateTime.Now.ToString("hh:mm tt")}",
            };
        toastService.Notify(mensaje);
        return mensaje;
    }
    protected override async Task OnInitializedAsync()
    {
        usuario.UsuarioId = UsuarioId;
        usuario = await usuarioService.Buscar(UsuarioId);
        listUsuarios = await usuarioService.Listar(u => true);
    }
    private async Task<bool> Validar()
    {
        hayUsuario = await usuarioService.Existe(usuario.UsuarioId, usuario.Nombre);
        return !hayUsuario;
    }
    public async Task Modificar()
    {
        if (!await Validar())
        {
            Notificacion(ToastType.Warning, "Intente con otro nombre.");
            return;
        }
        var guardo = await usuarioService.Guardar(usuario);
        if (guardo)
        {
            Notificacion(ToastType.Warning, "Se Guardaron los datos correctamente.");
            await Volver();
        }
        else
            Notificacion(ToastType.Warning, "Ha ocurrido un error.");
    }
    public Task Volver()
    {
        navigation.NavigateTo("/usuarios/index/");
        return Task.CompletedTask;
    }
}
