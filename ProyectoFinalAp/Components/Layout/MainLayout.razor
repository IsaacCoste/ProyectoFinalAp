@implements IDisposable
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<div class="page fondo">

    <main>
        <div class="top-row px-4">
            <div class="container-fluid d-flex align-items-center">
                <a href="/">
                    <img src="images/Icon.png" style="width: 40px; height: auto;" />
                </a>
                <a href="/"><h5 class="message"><strong>Sistema de Finanzas</strong></h5></a>

            </div>
            <i class="bi bi-person px-1" style="font-size: 1.5rem;"></i>
            <AuthorizeView>
                @context.User.Identity?.Name
            </AuthorizeView>
            <AuthorizeView Roles="Admin, Usuario">
                <div class="top-row px-2">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="" />
                        <button type="submit" class="btn btn-danger"><i class="fas fa-plus"></i>Logout</button>
                    </form>

                </div>
            </AuthorizeView>
            <Toasts class="p-3" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
        </div>

        <article class="content ">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);

        // Optional: Automatically navigate to the login page if the user is logged out
        if (currentUrl == "Account/Logout")
        {
            NavigationManager.NavigateTo("/");
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}